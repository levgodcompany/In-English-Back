generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para el estudiante
model Student {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String
  email     String   @unique
  password  String
  birthDate DateTime // Fecha de nacimiento
  level     Level[]
  unit      Unit[]
  course    Course[]
  module    Module[]

  @@map("Students")
}

// Modelo de los profesores
model Teacher {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String
  password  String
  email     String
  birthDate DateTime // Fecha de nacimiento
  levels    Level[]
  unities   Unit[]
  courses   Course[]
  modules   Module[]

  @@map("Teachers")
}

// Modelo de los niveles
model Level {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  order       Int // Nos permite organizar los niveles
  unities     Unit[] // Un nivel puede tener n unidades
  activity    Activity[]
  teachers    Teacher[]
  sudents     Student[]

  @@map("Levels")
}

// Modelo de las unidades
model Unit {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  order       Int // Nos permetira organizar las unidades
  level       Level      @relation(fields: [idLevel], references: [id]) // Muchas unidades puede estar en un nivel
  idLevel     Int
  courses     Course[] //Una unidad puede tener muchos cursos
  activity    Activity[]
  teachers    Teacher[]
  sudents     Student[]

  @@map("Unities")
}

// Modelo de los cursos
// cada curso pertenece a una unidad
model Course {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  order       Int
  unit        Unit       @relation(fields: [idUnit], references: [id]) // muchos cursos pueden pertenecer a una unidad
  idUnit      Int
  materials   Module[] // Un curso puede tener muchos modulos
  activity    Activity[]
  teachers    Teacher[]
  sudents     Student[]

  @@map("Courses")
}

model Module {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  idCourse    Int
  idTeacher   Int
  order       Int
  fileURL     String?
  typeFile    String?
  activity    Activity[] // Un modulo puede tener muchas actividades
  course      Course     @relation(fields: [idCourse], references: [id]) // Muchos modulos pueden estar en un solo curso
  teachers    Teacher[]
  sudents     Student[]

  @@map("Modules")
}

model Activity {
  id             Int                  @id @default(autoincrement())
  title          String
  description    String?
  fileURL        String?
  typeFile       String?
  oreder         Int
  activityTypeId Int
  levels         Level[]
  units          Unit[]
  courses        Course[]
  modules        Module[]
  submissions    ActivitySubmission[]
  activityType   ActivityType         @relation(fields: [activityTypeId], references: [id])

  @@map("Activities")
}

model ActivityType {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  activity    Activity[]
}

// Envio de actividad
model ActivitySubmission {
  id            Int      @id
  studentId     Int
  activityId    Int
  submittedAt   DateTime @default(now())
  content       String
  fileURL       String
  status        String
  qualification Decimal
  activity      Activity @relation(fields: [activityId], references: [id])
}
