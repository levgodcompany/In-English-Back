generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para el estudiante
model Student {
  id                  Int                   @id @default(autoincrement())
  name                String
  lastName            String
  email               String                @unique
  password            String
  birthDate           DateTime // Fecha de nacimiento
  idStatus            Int
  levels              LevelStudent[]
  units               UnitStudent[]
  courses             CourseStudent[]
  modules             ModuleStudent[]
  suscriptions        StudentSuscription[]
  status              Status                @relation(fields: [idStatus], references: [id], onDelete: Cascade)
  examSubmissionUnit  ExamSubmissionUnit[]
  examSubmissionLevel ExamSubmissionLevel[]
  cohortStudent       CohortStudent[]

  @@map("Students")
}

// Modelo para los profesores
model Teacher {
  id             Int             @id @default(autoincrement())
  name           String
  lastName       String
  password       String
  email          String
  birthDate      DateTime // Fecha de nacimiento
  levels         LevelTeacher[]
  units          UnitTeacher[]
  courses        CourseTeacher[]
  modules        ModuleTeacher[]
  examUnit       ExamUnit[]
  examLevel      ExamLevel[]
  cohortTeachers CohortTeacher[]

  @@map("Teachers")
}

// Modelo de los niveles
model Level {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  order        Int // Nos permite organizar los niveles
  unities      Unit[] // Un nivel puede tener muchas unidades
  exams        ExamLevel[]
  teachers     LevelTeacher[]
  students     LevelStudent[]
  suscriptions Suscription[]
  cohorts      Cohort[]

  @@map("Levels")
}

// Modulo de Cohortes / camadas
model Cohort {
  id                    Int             @id @default(autoincrement())
  title                 String
  description           String
  startDate             DateTime
  endDate               DateTime
  registrationStartDate DateTime
  registrationEndDate   DateTime
  idLevel               Int
  level                 Level           @relation(fields: [idLevel], references: [id], onDelete: Cascade)
  cohortStudents        CohortStudent[]
  cohortTeachers        CohortTeacher[]
  cohortUnities         CohortUnit[]
  cohortCourses         CohortCourse[]
  cohortModules         CohortModule[]

  @@map("Cohorts")
}

// Relación entre Cohort y Student
model CohortStudent {
  idStudent Int
  idCohort  Int
  student   Student @relation(fields: [idStudent], references: [id], onDelete: Cascade)
  cohort    Cohort  @relation(fields: [idCohort], references: [id], onDelete: Cascade)

  @@id([idStudent, idCohort])
}

// Relación entre Cohort y Teacher
model CohortTeacher {
  idTeacher Int
  idCohort  Int
  teacher   Teacher @relation(fields: [idTeacher], references: [id], onDelete: Cascade)
  cohort    Cohort  @relation(fields: [idCohort], references: [id], onDelete: Cascade)

  @@id([idTeacher, idCohort])
}

// Relación entre Cohort y Unities
model CohortUnit {
  idUnit   Int
  idCohort Int
  unities  Unit   @relation(fields: [idUnit], references: [id], onDelete: Cascade)
  cohort   Cohort @relation(fields: [idCohort], references: [id], onDelete: Cascade)

  @@id([idUnit, idCohort])
}

// Relación entre Cohort y Courses
model CohortCourse {
  idCourse Int
  idCohort Int
  courses  Course @relation(fields: [idCourse], references: [id], onDelete: Cascade)
  cohort   Cohort @relation(fields: [idCohort], references: [id], onDelete: Cascade)

  @@id([idCourse, idCohort])
}

// Relación entre Cohort y Modules
model CohortModule {
  idModule Int
  idCohort Int
  modules  Module @relation(fields: [idModule], references: [id], onDelete: Cascade)
  cohort   Cohort @relation(fields: [idCohort], references: [id], onDelete: Cascade)

  @@id([idModule, idCohort])
}

// Modelo de suscripciones
model Suscription {
  id                 Int                        @id @default(autoincrement())
  idLevel            Int
  title              String
  description        String
  amount             Decimal // Monto de la suscripción
  numInstallments    Int // Número de cuotas
  discountPercentage Int // Porcentaje de descuento
  level              Level                      @relation(fields: [idLevel], references: [id], onDelete: Cascade)
  students           StudentSuscription[]
  paymentMethods     SuscriptionPaymentMethod[]
  benefits           SuscriptionBenefit[]

  @@map("Suscriptions")
}

// Modelo de los beneficios
model Benefit {
  id           Int                  @id @default(autoincrement())
  description  String
  suscriptions SuscriptionBenefit[]

  @@map("Benefits")
}

// Modelo de los estados
model Status {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String
  status              Int
  studentSuscriptions StudentSuscription[]
  payments            Payment[]
  students            Student[]
  examSubmissionUnit  ExamSubmissionUnit[]
  examSubmissionLevel ExamSubmissionLevel[]

  @@map("Status")
}

// Modelo de métodos de pago
model PaymentMethod {
  id           Int                        @id @default(autoincrement())
  description  String
  suscriptions SuscriptionPaymentMethod[]
  payments     Payment[]

  @@map("PaymentMethods")
}

// Modelo de los pagos
model Payment {
  id                 Int                @id @default(autoincrement())
  idStudent          Int
  idSuscription      Int
  idStatus           Int
  idPaymentMethod    Int
  amount             Decimal
  paymentDate        DateTime
  monthlyFee         Int // Cuota mensual
  status             Status             @relation(fields: [idStatus], references: [id], onDelete: Cascade)
  paymentMethod      PaymentMethod      @relation(fields: [idPaymentMethod], references: [id], onDelete: Cascade)
  studentSuscription StudentSuscription @relation(fields: [idStudent, idSuscription], references: [idStudent, idSuscription], onDelete: Cascade)

  @@map("Payments")
}

// Modelo de las unidades
model Unit {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  order         Int // Nos permitirá organizar las unidades
  level         Level         @relation(fields: [idLevel], references: [id], onDelete: Cascade) // Muchas unidades pueden estar en un nivel
  idLevel       Int
  courses       Course[] // Una unidad puede tener muchos cursos
  exams         ExamUnit[] // Un módulo puede tener muchas actividades
  teachers      UnitTeacher[]
  students      UnitStudent[]
  cohortUnities CohortUnit[]

  @@map("Unities")
}

// Modelo de los cursos
model Course {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  order         Int
  unit          Unit            @relation(fields: [idUnit], references: [id], onDelete: Cascade) // Muchos cursos pueden pertenecer a una unidad
  idUnit        Int
  modules       Module[] // Un curso puede tener muchos módulos
  teachers      CourseTeacher[]
  students      CourseStudent[]
  cohortCourses CohortCourse[]

  @@map("Courses")
}

// Modelo de los módulos
model Module {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  idCourse      Int
  order         Int
  fileURL       String?
  typeFile      String?
  course        Course          @relation(fields: [idCourse], references: [id], onDelete: Cascade) // Muchos módulos pueden estar en un solo curso
  teachers      ModuleTeacher[]
  students      ModuleStudent[]
  cohortModules CohortModule[]

  @@map("Modules")
}

// Examenes
model ExamUnit {
  id                 Int                  @id @default(autoincrement())
  idUnit             Int
  idTeacher          Int
  title              String
  description        String
  archive            String
  passingScore       Int // Puntuación mínima para aprobar
  numberAttempts     Int
  examSubmissionUnit ExamSubmissionUnit[]
  unit               Unit                 @relation(fields: [idUnit], references: [id], onDelete: Cascade)
  teacher            Teacher              @relation(fields: [idTeacher], references: [id], onDelete: Cascade)

  @@map("ExamsUnities")
}

model ExamLevel {
  id                  Int                   @id @default(autoincrement())
  idLevel             Int
  idTeacher           Int
  title               String
  description         String
  archive             String
  passingScore        Int // Puntuación mínima para aprobar
  NumberAttempts      Int
  examSubmissionLevel ExamSubmissionLevel[]
  level               Level                 @relation(fields: [idLevel], references: [id], onDelete: Cascade)
  teacher             Teacher               @relation(fields: [idTeacher], references: [id], onDelete: Cascade)

  @@map("ExamsLevels")
}

model ExamSubmissionUnit {
  id             Int      @id @default(autoincrement())
  submissionDate DateTime @default(now())
  score          Int // Puntuación obtenida en el examen
  idStatus       Int
  idStudent      Int
  archive        String
  idExamUnit     Int
  student        Student  @relation(fields: [idStudent], references: [id], onDelete: Cascade)
  status         Status   @relation(fields: [idStatus], references: [id], onDelete: Cascade) // Estado de la entrega: Submitted, Graded, etc.
  exam           ExamUnit @relation(fields: [idExamUnit], references: [id], onDelete: Cascade)

  @@map("ExamSubmissionsUnities")
}

model ExamSubmissionLevel {
  id             Int       @id @default(autoincrement())
  submissionDate DateTime  @default(now())
  score          Int // Puntuación obtenida en el examen
  idStatus       Int
  idStudent      Int
  archive        String
  idExamLevel    Int
  student        Student   @relation(fields: [idStudent], references: [id], onDelete: Cascade)
  status         Status    @relation(fields: [idStatus], references: [id], onDelete: Cascade) // Estado de la entrega: Submitted, Graded, etc.
  exam           ExamLevel @relation(fields: [idExamLevel], references: [id], onDelete: Cascade)

  @@map("ExamSubmissionsLevel")
}

// Relación muchos a muchos entre Student y Suscription
model StudentSuscription {
  idStudent     Int
  idSuscription Int
  idStatus      Int
  startDate     DateTime
  endDate       DateTime?
  totalAmount   Decimal
  totalFees     Int // Total de cuotas
  student       Student     @relation(fields: [idStudent], references: [id], onDelete: Cascade)
  suscription   Suscription @relation(fields: [idSuscription], references: [id], onDelete: Cascade)
  status        Status      @relation(fields: [idStatus], references: [id], onDelete: Cascade)
  payment       Payment[]

  @@id([idStudent, idSuscription])
  @@unique([idStudent, idSuscription])
}

// Relación muchos a muchos entre Suscription y PaymentMethod
model SuscriptionPaymentMethod {
  idSuscription   Int
  idPaymentMethod Int
  suscription     Suscription   @relation(fields: [idSuscription], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [idPaymentMethod], references: [id], onDelete: Cascade)

  @@id([idSuscription, idPaymentMethod])
}

// Relación muchos a muchos entre Suscription y Benefit
model SuscriptionBenefit {
  idSuscription Int
  idBenefit     Int
  benefit       Benefit     @relation(fields: [idBenefit], references: [id], onDelete: Cascade)
  suscription   Suscription @relation(fields: [idSuscription], references: [id], onDelete: Cascade)

  @@id([idSuscription, idBenefit])
}

// Relación muchos a muchos entre Level y Teacher
model LevelTeacher {
  levelId   Int
  teacherId Int
  level     Level   @relation(fields: [levelId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([levelId, teacherId])
}

// Relación muchos a muchos entre Unit y Teacher
model UnitTeacher {
  unitId    Int
  teacherId Int
  unit      Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([unitId, teacherId])
}

// Relación muchos a muchos entre Course y Teacher
model CourseTeacher {
  courseId  Int
  teacherId Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([courseId, teacherId])
}

// Relación muchos a muchos entre Module y Teacher
model ModuleTeacher {
  moduleId  Int
  teacherId Int
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([moduleId, teacherId])
}

// Relación muchos a muchos entre Level y Student
model LevelStudent {
  levelId   Int
  studentId Int
  level     Level   @relation(fields: [levelId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([levelId, studentId])
}

// Relación muchos a muchos entre Unit y Student
model UnitStudent {
  unitId    Int
  studentId Int
  unit      Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([unitId, studentId])
}

// Relación muchos a muchos entre Course y Student
model CourseStudent {
  courseId  Int
  studentId Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([courseId, studentId])
}

// Relación muchos a muchos entre Module y Student
model ModuleStudent {
  moduleId  Int
  studentId Int
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([moduleId, studentId])
}
