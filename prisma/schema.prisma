generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para el estudiante
model Student {
  id                 Int                  @id @default(autoincrement())
  name               String
  lastName           String
  email              String               @unique
  password           String
  birthDate          DateTime // Fecha de nacimiento
  idStatus           Int
  levels             LevelStudent[]
  units              UnitStudent[]
  courses            CourseStudent[]
  modules            ModuleStudent[]
  activitySubmission ActivitySubmission[]
  suscriptions       StudentSuscription[]
  status             Status               @relation(fields: [idStatus], references: [id])

  @@map("Students")
}

// Modelo para los profesores
model Teacher {
  id        Int             @id @default(autoincrement())
  name      String
  lastName  String
  password  String
  email     String
  birthDate DateTime // Fecha de nacimiento
  levels    LevelTeacher[]
  units     UnitTeacher[]
  courses   CourseTeacher[]
  modules   ModuleTeacher[]

  @@map("Teachers")
}

// Modelo de los niveles
model Level {
  id           Int             @id @default(autoincrement())
  title        String
  description  String
  order        Int // Nos permite organizar los niveles
  unities      Unit[] // Un nivel puede tener muchas unidades
  activities   LevelActivity[]
  teachers     LevelTeacher[]
  students     LevelStudent[]
  suscriptions Suscription[]

  @@map("Levels")
}

// Modelo de suscripciones
model Suscription {
  id                 Int                        @id @default(autoincrement())
  idLevel            Int
  title              String
  description        String
  amount             Decimal // Monto de la suscripción
  numInstallments    Int // Número de cuotas
  discountPercentage Int // Porcentaje de descuento
  level              Level                      @relation(fields: [idLevel], references: [id])
  students           StudentSuscription[]
  paymentMethods     SuscriptionPaymentMethod[]
  benefits           SuscriptionBenefit[]

  @@map("Suscriptions")
}

// Modelo de los beneficios
model Benefit {
  id           Int                  @id @default(autoincrement())
  description  String
  suscriptions SuscriptionBenefit[]

  @@map("Benefits")
}

// Modelo de los estados
model Status {
  id                  Int                  @id @default(autoincrement())
  title               String
  description         String
  status              Int
  studentSuscriptions StudentSuscription[]
  payments            Payment[]
  students            Student[]

  @@map("Status")
}

// Modelo de métodos de pago
model PaymentMethod {
  id           Int                        @id @default(autoincrement())
  description  String
  suscriptions SuscriptionPaymentMethod[]
  payments     Payment[]

  @@map("PaymentMethods")
}

// Modelo de los pagos
model Payment {
  id                 Int                @id @default(autoincrement())
  idStudent          Int
  idSuscription      Int
  idStatus           Int
  idPaymentMethod    Int
  amount             Decimal
  paymentDate        DateTime
  monthlyFee         Int // Cuota mensual
  status             Status             @relation(fields: [idStatus], references: [id])
  paymentMethod      PaymentMethod      @relation(fields: [idPaymentMethod], references: [id])
  studentSuscription StudentSuscription @relation(fields: [idStudent, idSuscription], references: [idStudent, idSuscription])

  @@map("Payments")
}

// Modelo de las unidades
model Unit {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  order       Int // Nos permitirá organizar las unidades
  level       Level          @relation(fields: [idLevel], references: [id]) // Muchas unidades pueden estar en un nivel
  idLevel     Int
  courses     Course[] // Una unidad puede tener muchos cursos
  activities  UnitActivity[]
  teachers    UnitTeacher[]
  students    UnitStudent[]

  @@map("Unities")
}

// Modelo de los cursos
model Course {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  order       Int
  unit        Unit             @relation(fields: [idUnit], references: [id]) // Muchos cursos pueden pertenecer a una unidad
  idUnit      Int
  modules     Module[] // Un curso puede tener muchos módulos
  activities  CourseActivity[]
  teachers    CourseTeacher[]
  students    CourseStudent[]

  @@map("Courses")
}

// Modelo de los módulos
model Module {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  idCourse    Int
  order       Int
  fileURL     String?
  typeFile    String?
  activities  ModuleActivity[] // Un módulo puede tener muchas actividades
  course      Course           @relation(fields: [idCourse], references: [id]) // Muchos módulos pueden estar en un solo curso
  teachers    ModuleTeacher[]
  students    ModuleStudent[]

  @@map("Modules")
}

// Modelo de las actividades
model Activity {
  id             Int                  @id @default(autoincrement())
  title          String
  description    String?
  fileURL        String?
  typeFile       String?
  order          Int
  activityTypeId Int
  levels         LevelActivity[]
  units          UnitActivity[]
  courses        CourseActivity[]
  modules        ModuleActivity[]
  submissions    ActivitySubmission[]
  activityType   ActivityType         @relation(fields: [activityTypeId], references: [id])

  @@map("Activities")
}

// Modelo de tipos de actividad
model ActivityType {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  activities  Activity[]

  @@map("ActivityTypes")
}

// Modelo de la entrega de actividades
model ActivitySubmission {
  id            Int      @id @default(autoincrement())
  studentId     Int
  activityId    Int
  submittedAt   DateTime @default(now())
  content       String
  fileURL       String
  status        String
  qualification Decimal
  activity      Activity @relation(fields: [activityId], references: [id])
  student       Student  @relation(fields: [studentId], references: [id])

  @@map("ActivitySubmissions")
}

// Relación muchos a muchos entre Level y Activity
model LevelActivity {
  levelId    Int
  activityId Int
  level      Level    @relation(fields: [levelId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])

  @@id([levelId, activityId])
}

// Relación muchos a muchos entre Student y Suscription
model StudentSuscription {
  idStudent     Int
  idSuscription Int
  idStatus      Int
  startDate     DateTime
  endDate       DateTime?
  totalAmount   Decimal
  totalFees     Int // Total de cuotas
  student       Student     @relation(fields: [idStudent], references: [id])
  suscription   Suscription @relation(fields: [idSuscription], references: [id])
  status        Status      @relation(fields: [idStatus], references: [id])
  payment       Payment[]

  @@id([idStudent, idSuscription])
  @@unique([idStudent, idSuscription])
}

// Relación muchos a muchos entre Suscription y PaymentMethod
model SuscriptionPaymentMethod {
  idSuscription   Int
  idPaymentMethod Int
  suscription     Suscription   @relation(fields: [idSuscription], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [idPaymentMethod], references: [id])

  @@id([idSuscription, idPaymentMethod])
}

// Relación muchos a muchos entre Suscription y Benefit
model SuscriptionBenefit {
  idSuscription Int
  idBenefit     Int
  benefit       Benefit     @relation(fields: [idBenefit], references: [id])
  suscription   Suscription @relation(fields: [idSuscription], references: [id])

  @@id([idSuscription, idBenefit])
}

// Relación muchos a muchos entre Unit y Activity
model UnitActivity {
  unitId     Int
  activityId Int
  unit       Unit     @relation(fields: [unitId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])

  @@id([unitId, activityId])
}

// Relación muchos a muchos entre Course y Activity
model CourseActivity {
  courseId   Int
  activityId Int
  course     Course   @relation(fields: [courseId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])

  @@id([courseId, activityId])
}

// Relación muchos a muchos entre Module y Activity
model ModuleActivity {
  moduleId   Int
  activityId Int
  module     Module   @relation(fields: [moduleId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])

  @@id([moduleId, activityId])
}

// Relación muchos a muchos entre Level y Teacher
model LevelTeacher {
  levelId   Int
  teacherId Int
  level     Level   @relation(fields: [levelId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([levelId, teacherId])
}

// Relación muchos a muchos entre Unit y Teacher
model UnitTeacher {
  unitId    Int
  teacherId Int
  unit      Unit    @relation(fields: [unitId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([unitId, teacherId])
}

// Relación muchos a muchos entre Course y Teacher
model CourseTeacher {
  courseId  Int
  teacherId Int
  course    Course  @relation(fields: [courseId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([courseId, teacherId])
}

// Relación muchos a muchos entre Module y Teacher
model ModuleTeacher {
  moduleId  Int
  teacherId Int
  module    Module  @relation(fields: [moduleId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([moduleId, teacherId])
}

// Relación muchos a muchos entre Level y Student
model LevelStudent {
  levelId   Int
  studentId Int
  level     Level   @relation(fields: [levelId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([levelId, studentId])
}

// Relación muchos a muchos entre Unit y Student
model UnitStudent {
  unitId    Int
  studentId Int
  unit      Unit    @relation(fields: [unitId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([unitId, studentId])
}

// Relación muchos a muchos entre Course y Student
model CourseStudent {
  courseId  Int
  studentId Int
  course    Course  @relation(fields: [courseId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([courseId, studentId])
}

// Relación muchos a muchos entre Module y Student
model ModuleStudent {
  moduleId  Int
  studentId Int
  module    Module  @relation(fields: [moduleId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([moduleId, studentId])
}
